class Solution {
    public int longestValidParentheses(String s) {
// using 1d dp matrix;

        char[] ch = s.toCharArray();
        int n = ch.length;
        
        // corner case:
        if(n == 0 || n == 1) return 0;
        
        int max = 0;
        int[] dp = new int[n];
        for(int i=1; i < n; i++){
            // if ch[i] == '(', dp[i] = 0;
            if(ch[i] == ')'){
                // check if using the current ')' can increase max length of longest parentheses;
                // simple case;
                if(ch[i-1] == '('){
                    dp[i] = (i-2) >= 0 ? (dp[i-2] + 2) : 2;
                }
                // otherwise, retieve to i-dp[i-1]-1;
                else{
                    if(i-dp[i-1] > 0 && ch[i-dp[i-1]-1] == '('){
                        dp[i] = dp[i-1] + 2 + ((i-dp[i-1]-1 > 0) ? dp[i - dp[i-1] - 2] : 0);
                    }
                }
            }
            max = Math.max(max, dp[i]);
        }
        
        return max;
    }
    
    
        // using 2d dp matrix => memory limit exceeded;
        // test case failed at 227/230;
        
//         char[] ch = s.toCharArray();
//         int len = ch.length;
        
//         // corner case:
//         if(len == 0 || len == 1) return 0;
//         if(len == 2){
//             if(ch[0] == '(' && ch[1] == ')') return 2;
//             else return 0;
//         }
//         if(len == 3){
//             if((ch[0] == '(' && ch[1] == ')') || (ch[1] == '(' && ch[2] == ')')) return 2;
//             else return 0;
//         }
        
//         int[][] dp = new int[len][len];
        
//         for(int i = 0; i < len - 1; i++){
//             if(ch[i] == '(' && ch[i+1] ==')') dp[i][i+1] = 2;
//             // System.out.println("dp" + i + (i+1) + " = " + dp[i][i+1]);
//         }
        
//         for(int l = 3; l < len; l += 2){
//             for(int i = 0; i < len - l; i++){
//                 dp[i][i+l] = Math.max(dp[i][i+l-2], Math.max(dp[i+1][i+l-1], dp[i+2][i+l]));
//                 if(ch[i] == '(' && ch[i+l] ==')' && dp[i+1][i+l-1] == l-1) dp[i][i+l] = l+1;
//                 for(int j = 1; j < l-1; j++){
//                     if(dp[i][i+j] == j+1 && dp[i+j+1][i+l] == l-j){
//                         dp[i][i+l] = l+1;
//                         break;
//                     }
//                 }
//                 // System.out.println("dp" + i + (i+l) + " = " + dp[i][i+l]);
//             }
            
//         }
        
//         // Be careful when step in for loop is > 1;
//         return len%2 == 0 ? dp[0][len-1] : Math.max(dp[0][len-2], dp[1][len-1]);
//     }
}
