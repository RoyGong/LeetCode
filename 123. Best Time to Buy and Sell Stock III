class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if(n == 0 || n == 1) return 0;
            
        int[] max1 = new int[n];
        int[] max2 = new int[n];
        
        int buy = prices[0];
        int sell = prices[n-1];
        
        for(int i = 1; i < n; i++){
            buy = Math.min(buy, prices[i]);
            max1[i] = Math.max(max1[i-1], prices[i] - buy);
        }
        
        for(int i = n-1; i > 1; i--){
            sell = Math.max(sell, prices[i]);
            max2[i] = Math.max(max2[1], sell - prices[i]);
        }
        
        int profit = max1[n-1];
        for(int i = 1; i < n; i++){
            profit = Math.max(profit, max1[i-1] + max2[i]);
        }
        
        return profit;
    }
    
    // public int maxProfit(int[] prices) {
    //     int hold1 = Integer.MIN_VALUE, hold2 = Integer.MIN_VALUE;
    //     int release1 = 0, release2 = 0;
    //     for(int i:prices){                              // Assume we only have 0 money at first
    //         release2 = Math.max(release2, hold2+i);     // The maximum if we've just sold 2nd stock so far.
    //         hold2    = Math.max(hold2,    release1-i);  // The maximum if we've just buy  2nd stock so far.
    //         release1 = Math.max(release1, hold1+i);     // The maximum if we've just sold 1nd stock so far.
    //         hold1    = Math.max(hold1,    -i);          // The maximum if we've just buy  1st stock so far. 
    //     }
    //     return release2; ///Since release1 is initiated as 0, so release2 will always higher than release1.
    // }
}
