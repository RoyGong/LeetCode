class Solution {
    public boolean isMatch(String s, String p) {
        
        if (s == null || p == null) return false;
        
        int n = s.length();
        int m = p.length();
        // if(p.equals("*")) return true;
        // if(m == 0 && n == 0) return true;
        // if(m == 0 || n == 0) return false;
        
        // dp[i][j] store if the first ith element in p matches the first jth element in s; 
        boolean[][] dp = new boolean[n+1][m+1];
        dp[0][0] = true;
        
        // initialzie the case when p.charAt(j - 1) == '*';
        for (int j = 1; j < m + 1; j++)   dp[0][j] = dp[0][j - 1] && p.charAt(j - 1) == '*';
        
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                
                // Normal case: p[j-1] == '?' or s[i-1] = p[j-1];
                if(p.charAt(j-1) == '?' || p.charAt(j-1) == s.charAt(i-1)) dp[i][j] = dp[i-1][j-1];
                
                // * case: check matching condition; 
                else if(p.charAt(j-1) == '*'){
                    // check the condition when '*' treated as empty: p[j-2] == s[i-1] ?;
                    if (j > 1 && (p.charAt(j-2) == s.charAt(i-1) || p.charAt(j-2) == '?'))  dp[i][j] = dp[i-1][j-2];
                    dp[i][j] = dp[i][j] || dp[i-1][j] || dp[i][j-1];
                }
            }
        }
        return dp[n][m];
    }
}
