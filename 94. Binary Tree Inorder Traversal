/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
//     // recursive;
//     public List<Integer> inorderTraversal(TreeNode root) {
//         List<Integer> res = new ArrayList<>();
//         helper(root, res);
//         return res;
//     }
    
//     private void helper(TreeNode node, List<Integer> res){
//         if(node == null) return;
//         helper(node.left, res);
//         res.add(node.val);
//         helper(node.right, res);
//     }
    
    // iterative;
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        LinkedList<TreeNode> stack = new LinkedList<>();
        TreeNode node = root;
        
        // mimik the in-order recursion process using a stack: heading to node.left => dealing with node => heading to node.right;
        while(!stack.isEmpty() || node != null){
            while(node != null) {
                stack.push(node);
                node = node.left;
            }
            node = stack.pop();
            res.add(node.val);
            node = node.right;
        }
        
        return res;
    }
}
