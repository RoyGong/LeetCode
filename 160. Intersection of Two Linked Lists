/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        if(headA == null || headB == null) return null;
            
        int lenA = getLength(headA);
        int lenB = getLength(headB);
        
        if(lenA >= lenB) return helper(headA, headB, lenA, lenB);
        else return helper(headB, headA, lenB, lenA);
    }
    
    private int getLength(ListNode head){
        ListNode node = head;
        int length = 0;
        while(node != null){
            length++;
            node = node.next;
        }
        return length;
    }
    
    private ListNode helper(ListNode headA, ListNode headB, int lenA, int lenB){
        // lenA >= lenB;
        ListNode nodeA = headA;
        ListNode nodeB = headB;
        for(int i = 0; i < lenA  - lenB; i++) nodeA = nodeA.next;
        
        while(nodeA != nodeB){
            nodeA = nodeA.next;
            nodeB = nodeB.next;
        }
        
        return nodeA;
    }
}
