class Solution {
    public int numIslands(char[][] grid) {
        int count = 0;
        int h = grid.length;
        if(h == 0) return 0;
        int w = grid[0].length;
        
        for(int i = 0; i < h; i++){
            for(int j = 0; j < w; j++){
                if(grid[i][j] == '1'){
                    count++;
                    dfs(grid, i, j);
                }
            }
        }
        
        return count;
    }
    
    private static int[][] vecs = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    private void dfs(char[][] grid, int i, int j){
        int h = grid.length;
        int w = grid[0].length;
        grid[i][j] = '0';
        for(int[] vec : vecs){
            if(i + vec[0] >= 0 && i + vec[0] < h && j + vec[1] >= 0 && j + vec[1] < w && grid[i + vec[0]][j + vec[1]] == '1') dfs(grid, i + vec[0], j + vec[1]);
        }
    }
}
