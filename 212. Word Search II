class Solution {
    
    public static int[][] next = {{1,0},{0,1},{-1,0},{0,-1}};
    
    public List<String> findWords(char[][] board, String[] words) {
        Set<String> res = new HashSet<>();
        List<String> wordSet = new ArrayList<>();
        
        int h = board.length;
        if(h == 0) return wordSet;
        int w = board[0].length;
        if(w == 0) return wordSet;
        int[][] visited = new int[h][w];
        
        for(String word : words){
            reset(visited);
            for(int i = 0; i < h; i++){
                for(int j = 0; j < w; j++){
                    boolean found = dfs(board, visited, i, j, word, 0);
                    if(found) res.add(word);
                }
            }
        }
        
        
        for(String word : res) wordSet.add(word);
        return wordSet;
    }
    
    private boolean dfs(char[][] board, int[][] visited, int i, int j, String word, int index){
        // if(index == word.length()) return true;
        if(index == word.length() - 1 && word.charAt(index) == board[i][j]) return true;
        if(word.charAt(index) != board[i][j]) return false;
        visited[i][j] = 1;
        
        boolean flag = false;
        for(int[] dir : next){
            if(outOfBound(board, i + dir[0], j + dir[1])) continue;
            if(visited[i + dir[0]][j + dir[1]] == 1) continue;
            flag = dfs(board, visited, i + dir[0], j + dir[1], word, index + 1);
            if(flag) break;
        }
        visited[i][j] = 0;
        return flag;
    }
    
    private boolean outOfBound(char[][] matrix, int i, int j){
        if(i < 0 || j < 0 || i > matrix.length - 1 || j > matrix[0].length - 1) return true;
        return false;
    }
    
    private void reset(int[][] visited){
        for(int i = 0; i < visited.length; i++){
            for(int j = 0; j < visited[0].length; j++) visited[i][j] = 0;
        }
    }
}
