/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    public Node connect(Node root){
        if(root == null) return null;
        
        Node level = root;
        root.next = null;
        while(level != null && level.left != null){
            Node curr = level;
            while(curr != null){
                curr.left.next = curr.right;
                if(curr.next != null) curr.right.next = curr.next.left;
                curr = curr.next;
                // System.out.println("next level");
            }
            
            level = level.left;
        }
        return root;
    }
    
//     // This generalized method applies for arbitary binary tree;
//     public Node connect(Node root) {
//         LinkedList<Node> queue = new LinkedList<>();
//         if(root == null) return null;
        
//         queue.add(root);
        
//         Node curr = new Node(0);
//         while(!queue.isEmpty()){
//             int size = queue.size();
            
//             curr = queue.remove();
//             for(int i = 0; i < size; i++){
//                 // System.out.println(curr.val);
//                 if(curr.left != null) queue.add(curr.left);
//                 if(curr.right != null) queue.add(curr.right);
//                 if(i < size - 1) {
//                     curr.next = queue.remove();
//                     curr = curr.next;
//                 }
//             }
//             curr.next = null;
//             // System.out.println("next level");
//         }
        
//         return root;
//     }
}
