class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        
        if(n == 0 || n == 1) return 0;
            
        int[] hold = new int[n];
        int[] unhold = new int[n];
        
        hold[0] = -prices[0];
        unhold[0] = 0;
        
        for(int i = 1; i < n; i++){
            hold[i] = Math.max(hold[i-1], unhold[i-1] - prices[i]);
            unhold[i] = Math.max(unhold[i-1], hold[i-1] + prices[i]);
        }
        
        return unhold[n-1];
        
        
        // Non-DP thinking: find pairs of price valley and peak, each pair contributes profit to maxProfit;
    }
}
