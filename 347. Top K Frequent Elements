class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
//         // Heap sort
//         // loop over element and update the frequency;
//         // map key = number, value = count;
//         Map<Integer, Integer> map = new HashMap<>();
//         Arrays.sort(nums);
//         int count = 1;
//         for(int num : nums) map.put(num, map.getOrDefault(num, 0) + 1);
        
//         // stores number-count pairs in maxheap sorted by count;
//         PriorityQueue<Map.Entry<Integer, Integer>> maxHeap = 
//             new PriorityQueue<>((a,b)->(b.getValue()-a.getValue()));
        
//         for(Map.Entry<Integer,Integer> entry: map.entrySet()) maxHeap.add(entry);
        
//         // poll the first k elements from maxHeap;
//         List<Integer> res = new ArrayList<>();
//         for(int i = 0; i < k; i++){
//             Map.Entry<Integer, Integer> entry = maxHeap.poll();
//             res.add(entry.getKey());
//         }
//         return res;
        
        
        // Bucket sort;
        List<Integer> res = new ArrayList<>();
        int n = nums.length;
        List<Integer>[] bucket = new ArrayList[n+1];
	    Map<Integer, Integer> map = new HashMap<Integer, Integer>();

	    for(int num : nums) map.put(num, map.getOrDefault(num, 0) + 1);

	    for (int key : map.keySet()) {
		    int count = map.get(key);
		    if (bucket[count] == null) bucket[count] = new ArrayList<>();
		    bucket[count].add(key);
	    }

	    for (int i = n; i >= 0; i--) {
            if (res.size() == k) break;
		    if (bucket[i] != null) res.addAll(bucket[i]);
	    }
        
	    return res;
    }
}
