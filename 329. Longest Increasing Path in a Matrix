class Solution {
    
    public static int[][] next = {{1,0},{0,1},{-1,0},{0,-1}};
        
    public int longestIncreasingPath(int[][] matrix) {
        int h = matrix.length;
        if(h == 0) return 0;
        int w = matrix[0].length;
        
        // need to check max length from each element: using dp => O(n3) => O(n2);
        int[][] dp = new int[h][w];
        
        int max = 1;
        for(int i = 0; i < h; i++){
            for(int j = 0; j < w; j++){
                max = Math.max(max, dfs(matrix, dp, i, j)); 
            }
        }
        
        return max;
    }
    
    private int dfs(int[][] matrix, int[][] dp, int i, int j){
        // if the longest subpath starting from matrix[i][j] has been stores, no need to repeat;
        if(dp[i][j] > 0) return dp[i][j];
        
        // len stores the subpath length starting from matrix[i][j];
        // if nowhere to go, len = 1;
        int len = 1;
        for(int[] dir : next){
            // check if each of the neighbors of matrix[i][j] is out of boundary or not with larger value;
            if(outOfBound(matrix, i + dir[0], j + dir[1])) continue;
            else if(matrix[i][j] >= matrix[i + dir[0]][j + dir[1]]) continue;
            // dfs the legit neighbors to get longest path;
            // Note: no need to flag visit status of each element because a > b && b > a = 0
            len = Math.max(len, dfs(matrix, dp, i + dir[0], j + dir[1]) + 1);
        }
        
        // dp[i][j] stores the longest subpath starting from matrix[i][j];
        dp[i][j] = len;
        return len;
    }
    
    private boolean outOfBound(int[][] matrix, int i, int j){
        if(i < 0 || j < 0 || i > matrix.length - 1 || j > matrix[0].length - 1) return true;
        return false;
    }
    
}
