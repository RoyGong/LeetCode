class Solution {
    
    ArrayList<List<String>> list = new ArrayList<>();
    ArrayList<String> res = new ArrayList<>();
    
    public List<List<String>> partition(String s) {
        helper(s,0);
	    return list;
	}
        
	private void helper(String s, int l){
	    if( res.size() > 0 && l > s.length() - 1){
	        List<String> cut = (ArrayList<String>) res.clone();
	        list.add(cut);
	    }
        
	    for(int r = l; r < s.length(); r++){
	        if(isPalindrome(s,l,r)){
	            if(l == r)
	                res.add(Character.toString(s.charAt(r)));
	            else res.add(s.substring(l, r+1));
                
	            helper(s, r+1);
                // Remember to reset partition after excuting helper function.
	            res.remove(res.size() - 1);
	        }
	    }
	}

    private boolean isPalindrome(String str, int l, int r){
	    if(l == r) return true;
	    while(l < r){
	        if(str.charAt(l) != str.charAt(r)) return false;
	        l++;
            r--;
	    }
	    return true;
	}
}
