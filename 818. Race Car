class Solution {
    public int racecar(int target) {
        int[] dp = new int[target + 1];
        
        // update dp[i] (min step needed to reach target i from starting point 0) by considering all possible cases from where previous reverse(stop) operation happens.
        for (int i = 1; i <= target; i++) {
            dp[i] = Integer.MAX_VALUE;
            int m = 1;
            int j = 1;
            
            // case # 1, forward accelerate for m step, reverse, backward accelerate for q step, then reverse at new starting point 2^m - 2^q => subproblem is dp[i - (j - p)] .
            while(j < i){
                for (int q = 0, p = 0; p < j; p = (1 << ++q) - 1) {
                    dp[i] = Math.min(dp[i], m + 1 + q + 1 + dp[i - (j - p)]);
                }
                // j is the target can be achieved by continuous acceleration, 1 => 3 => 7 => 15 => 31 => ...
                m += 1;
                j = (int) Math.pow(2, m) - 1;
                // j = (1 << ++m) - 1;
                // System.out.println(j);
            }
            
            // case # 2, forward accelerate for m step and spot on target i.
            if(i == j) dp[i] = Math.min(dp[i], m);
            
            // case # 3, forward accelerate for m step and exceed target, reverse at new starting point 2^m - 1 => subproblem is dp[j - i]. Note the direction is reverse.
            else dp[i] = Math.min(dp[i], m + (i == j ? 0 : 1 + dp[j - i]));
        }
    
        return dp[target];
    }
}
