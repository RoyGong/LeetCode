/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        
        List<Interval> res= new ArrayList<>();
        int n = intervals.size();
        
        if(n == 0) return res;
        if(n == 1) return intervals;
        
        // Note: sort intervals by starting point;
        intervals.sort((i1, i2) -> Integer.compare(i1.start, i2.start));
        
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        
        for(int i = 1; i <= n; i++){
            if(i < n && end >= intervals.get(i).start) end = Math.max(end, intervals.get(i).end);
            else {
                res.add(new Interval(start, end));
                if(i < n){
                    start = intervals.get(i).start;
                    end = intervals.get(i).end;
                }
            }
        }
        
        // if(end < intervals.get(n-1).start) res.add(intervals.get(n-1));
        
        return res;
    }
}
