class Solution {
    public boolean search(int[] nums, int target) {
        if(nums.length == 0) return false;
        if(nums.length == 1) return nums[0] == target;
        int l = 0;
        int r = nums.length - 1;
                
        while(l < r){
            
            while(l < r && nums[l] == nums[l+1]) l++;
            while(l < r && nums[r] == nums[r-1]) r--;
            
            int mid = (l + r)/2;
            if(target == nums[mid]) return true;
            // Be careful: as l and r may have been updated internally, it is possible that mid = (l+r)/2 = nums.length-1, in which case mid+1 = nums.length and nums[mid+1] throws error;
            if(mid + 1 < nums.length && target == nums[mid + 1]) return true;
            
            if(nums[mid] >= nums[0]){
                if(target < nums[mid] && target >= nums[0]) r = mid;
                else l = (l + r)%2 == 0 ? mid : mid+1;
            }
            
            else if(nums[mid] < nums[0]){
                if(target > nums[mid] && target < nums[0]) l = (l + r)%2 == 0 ? mid : mid+1;
                else r = mid;
            }
        }
        return false;
    }
}
