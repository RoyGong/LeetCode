class Solution {
    public int longestConsecutive(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for(int x : nums) set.add(x);
        
        int len = 0;
        
        for(int x : set){
            if(set.contains(x)){
                int y = x + 1;
                while(set.contains(y)) y++;
                len = Math.max(len, y-x);
            }
        }
        return len;
    }
    
//     private class UnionFind {
//         private int[] parent;
//         private int[] rank;
        
//         UnionFind(int n){
//             parent = new int[n];
//             rank = new int[n];
//             for(int i = 0; i < n; i++) parent[i] = i;
//         }
        
//         public int find(int x){
//             if(parent[x] != x) parent[x] = find(parent[x]);
//             return parent[x];
//         }
        
//         public boolean union(int x, int y){
            
//             int rootX = find(x);
//             int rootY = find(y);
            
//             if(rootX == rootY) return false;
            
//             if(rank[rootX] > rank[rootY]) parent[rootY] = parent[rootX];
//             else if(rank[rootX] < rank[rootY]) parent[rootX] = parent[rootY];
//             else {
//                 parent[rootX] = rootY;
//                 rank[rootX]++;
//             }
//             return true;
//         }
//     }
}
