/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuffer res = new StringBuffer();
        if(root == null) return res.toString();
        serialize(root, res);
        res.setLength(res.length()-1);
        return res.toString();
    }
    
    private void serialize(TreeNode node, StringBuffer res){
        if(node == null){
            res.append('n').append(',');
            // System.out.println("null");
            return;
        }
        else{
            res.append(node.val).append(',');
            // System.out.println(node.val);
        }
        
        
        serialize(node.left, res);
        serialize(node.right, res);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        
        if(data.length() == 0) return null;
        ArrayList<String> nums = new ArrayList<>();
        nums.addAll(Arrays.asList(data.split(",")));
        // System.out.println(nums.toString());
        int n = nums.size();
        TreeNode root = deserialize(nums);
        return root;
    }
    
    private TreeNode deserialize(ArrayList<String> data){
        String curr = data.remove(0);
        if(curr.equals("n")){
            // System.out.println("null");
            return null;
        }
        
        // System.out.println(curr);
        TreeNode node = new TreeNode(Integer.valueOf(curr));
        node.left = deserialize(data);
        node.right = deserialize(data);
        return node;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
