class Solution {
    public int trap(int[] height) {
        // get lowest bound from left-hand-side;
        int n = height.length;
        if(n == 0) return 0;
        
        int bound[] = new int[n];
        for(int i = 1; i < n; i++) {
            bound[i] = Math.max(bound[i-1], height[i-1]);
            // System.out.println(i + " and " + bound[i]);
        }
        
        // get lower bound from left-hand-side AND right-hand-side;
        int right = height[n-1];
        for(int i = n-2; i > 0; i--) {
            right = Math.max(right, height[i+1]);
            bound[i] = Math.min(bound[i], right);
            // System.out.println(i + " and " + bound[i]);
        }
        
        
        // calculate trapped water;
        int sum = 0;
        for(int i = 1; i < n-1; i++) sum += Math.max(bound[i] - height[i], 0);
        
        return sum;
    }
}
