class Solution {
    public boolean exist(char[][] board, String word) {
 
        int height = board.length;
        // need to treat corner case ?
        int width = board[0].length;
        
        for(int i = 0; i < height; i++){
            for(int j = 0; j < width; j++){
                if(dfs(i, j, 0, board, word)) return true;
            }
        }
        
        return false;
    }
    
    private boolean dfs(int i, int j, int index, char[][] board, String word){
        int height = board.length;
        int width = board[0].length;
        if(index == word.length()) return true;
        else if(i < 0 || j < 0 || i > height - 1 || j > width - 1) return false;
        else if(word.charAt(index) != board[i][j]) return false;
        
        // need to remove checked element in board, otherwise this element may be reused, which is not allowed.
        char c = board[i][j];
        board[i][j] = '*';
        boolean res = dfs(i, j-1, index+1, board, word) ||
            dfs(i, j+1, index+1, board, word) ||
            dfs(i+1, j, index+1, board, word) ||
            dfs(i-1, j, index+1, board, word);
        board[i][j] = c;
        return res;
    }
}
