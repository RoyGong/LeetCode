class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n == 0) return 0;
        if(n == 1) return nums[0];
        if(n == 2) return Math.max(nums[0], nums[1]);
        if(n == 3) return Math.max(nums[0], Math.max(nums[1], nums[2]));
        return Math.max(helper(nums, 0, n-2), helper(nums, 1, n-1));
    }
    
        private int helper(int[] nums, int start, int end) {
        
        int n = end - start + 1;
        int[] dp = new int[n];
        dp[0] = nums[start];
        dp[1] = Math.max(nums[start], nums[start + 1]);
        dp[2] = Math.max(nums[start + 1], nums[start] + nums[start + 2]);

        for(int i = 3; i < n; i++){
            dp[i] = Math.max(dp[i-1], Math.max(dp[i-2], dp[i-3]) + nums[start + i]);
        }
        return dp[n-1];
    }
}
